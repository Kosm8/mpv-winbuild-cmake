if(COMPILER_TOOLCHAIN STREQUAL "gcc")
    set(gcc_install "gcc-install")
    set(binutils "gcc-binutils")
    set(gcc_wrapper "gcc-wrapper")
    set(opt "-O3")
elseif(COMPILER_TOOLCHAIN STREQUAL "clang")
    set(llvm_wrapper "llvm-wrapper")
    set(llvm_libcxx "llvm-libcxx")
    set(cfguard "--enable-cfguard")
    set(opt "-O3 -ffast-math -ffp-contract=fast -funroll-loops")
    if(LLVM_CCACHE_BUILD)
        set(llvm_ccache "-DLLVM_CCACHE_BUILD=ON -DLLVM_CCACHE_DIR=${LLVM_CCACHE_DIR} -DLLVM_CCACHE_MAXSIZE=${LLVM_CCACHE_MAXSIZE}")
    endif()
    if(LLVM_ENABLE_LTO STREQUAL "Thin")
        set(llvm_lto "-flto=thin -fwhole-program-vtables -fsplit-lto-unit")
    elseif(LLVM_ENABLE_LTO STREQUAL "Full")
        set(llvm_lto "-flto=full -fwhole-program-vtables -fsplit-lto-unit")
    endif()
    if(LLVM_ENABLE_PGO STREQUAL "GEN")
        set(llvm_pgo "-fprofile-generate=${LLVM_PROFILE_DATA_DIR} -fprofile-update=atomic")
    elseif(LLVM_ENABLE_PGO STREQUAL "CSGEN")
        set(llvm_pgo "-fcs-profile-generate=${LLVM_PROFILE_DATA_DIR} -fprofile-update=atomic -fprofile-use=${LLVM_PROFDATA_FILE}")
    elseif(LLVM_ENABLE_PGO STREQUAL "USE")
        set(llvm_pgo "-fprofile-use=${LLVM_PROFDATA_FILE}")
    endif()
endif()

if(TARGET_CPU STREQUAL "x86_64")
    set(ld_m_flag "i386pep")
    set(crt_lib "--disable-lib32 --enable-lib64")
    set(LIBOMP_ASMFLAGS_M64 "-DLIBOMP_ASMFLAGS=-m64")
    set(M_TUNE "core2")
    set(clang_cfi "-mguard=cf -fcf-protection=full -Xclang -ehcontguard")
    set(lld_cfi "-Xlink=-guard:cf,longjmp,ehcont -Xlink=-cetcompat")
    set(libcxx_cet "-DLIBUNWIND_ENABLE_CET=ON -DCXX_SUPPORTS_FCF_PROTECTION_EQ_FULL_FLAG=ON -DCXX_SUPPORTS_MSHSTK_FLAG=ON")
    set(compiler_rt_cet "-DCOMPILER_RT_ENABLE_CET=TRUE")
    #if (GCC_ARCH STREQUAL "x86-64")
        #unset(opt)
    #endif()
endif()
